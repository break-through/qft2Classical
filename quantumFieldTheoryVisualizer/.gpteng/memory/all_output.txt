To create a Python-based visualizer for exploring quantum fields and their interactions, we will need to implement several components. The core classes and functions will include:

1. `QuantumField`: Represents a quantum field for an elementary particle.
2. `PsiFunction`: Represents the quantum mechanical psi function resulting from the interactions of quantum fields.
3. `ProbabilityExpectation`: Calculates the probability expectations to transition from quantum to classical representations.
4. `ClassicalField`: Represents the classical field, such as a radio wave, emerging from quantum mechanical descriptions.
5. `Visualizer`: Handles the visualization of the fields and interactions.
6. `ParameterTuner`: Allows users to tune parameters of the quantum fields and interactions.
7. `Simulation`: Orchestrates the simulation and visualization process.
8. `main.py`: The entry point of the application.

We will also need a GUI framework to create the visual interface. For this purpose, we can use `PyQt5`, which is a set of Python bindings for the Qt application framework.

Let's start by setting up the project structure and creating the necessary files. We will then implement the code for each component.

First, we need to create a `requirements.txt` file to list our dependencies:

requirements.txt
```
pyqt5==5.15.4
numpy==1.19.5
matplotlib==3.3.4
scipy==1.6.0
```

Now, let's start with the entry point of the application:

main.py
```python
from PyQt5.QtWidgets import QApplication
from visualizer import Visualizer

def main():
    app = QApplication([])
    visualizer = Visualizer()
    visualizer.show()
    app.exec_()

if __name__ == "__main__":
    main()
```

Next, we will create the `Visualizer` class which will be responsible for the GUI and visualization:

visualizer.py
```python
from PyQt5.QtWidgets import QMainWindow, QWidget, QVBoxLayout
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class Visualizer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Quantum Field Visualizer')
        self.setGeometry(100, 100, 800, 600)
        self._main_widget = QWidget(self)
        self.setCentralWidget(self._main_widget)
        layout = QVBoxLayout(self._main_widget)
        
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)
        layout.addWidget(self.canvas)
        
        self._init_ui()

    def _init_ui(self):
        # Initialize the user interface components
        pass

    def plot_field(self, field_data):
        # Plot the field data on the canvas
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        ax.plot(field_data)
        self.canvas.draw()
```

Now, let's define the `QuantumField` class:

quantum_field.py
```python
import numpy as np

class QuantumField:
    def __init__(self, particle_type, parameters):
        self.particle_type = particle_type
        self.parameters = parameters

    def calculate_field(self):
        # Placeholder for the field calculation logic
        # This should be replaced with the actual quantum field calculations
        x = np.linspace(0, 10, 100)
        field = np.sin(x)  # Example field representation
        return field
```

Next, we'll create the `PsiFunction` class:

psi_function.py
```python
import numpy as np

class PsiFunction:
    def __init__(self, quantum_fields):
        self.quantum_fields = quantum_fields

    def integrate_fields(self):
        # Placeholder for the integration logic
        # This should be replaced with the actual psi function calculations
        psi = np.sum([field.calculate_field() for field in self.quantum_fields], axis=0)
        return psi
```

The `ProbabilityExpectation` class will calculate the transition probabilities:

probability_expectation.py
```python
import numpy as np

class ProbabilityExpectation:
    def __init__(self, psi_function):
        self.psi_function = psi_function

    def calculate_expectation(self):
        # Placeholder for the probability expectation calculation
        # This should be replaced with the actual calculations
        probability = np.abs(self.psi_function)**2
        return probability
```

The `ClassicalField` class will represent the classical field:

classical_field.py
```python
class ClassicalField:
    def __init__(self, probability_expectation):
        self.probability_expectation = probability_expectation

    def to_classical(self):
        # Placeholder for the conversion to classical field
        # This should be replaced with the actual conversion logic
        classical_field = self.probability_expectation
        return classical_field
```

The `ParameterTuner` class will allow users to tune parameters:

parameter_tuner.py
```python
class ParameterTuner:
    def __init__(self, quantum_field):
        self.quantum_field = quantum_field

    def tune_parameters(self, new_parameters):
        # Update the quantum field parameters
        self.quantum_field.parameters = new_parameters
```

Finally, the `Simulation` class will orchestrate the simulation process:

simulation.py
```python
from quantum_field import QuantumField
from psi_function import PsiFunction
from probability_expectation import ProbabilityExpectation
from classical_field import ClassicalField

class Simulation:
    def __init__(self, visualizer):
        self.visualizer = visualizer

    def run_simulation(self, parameters):
        # Create a quantum field
        quantum_field = QuantumField('electron', parameters)
        
        # Create the psi function from the quantum field
        psi_function = PsiFunction([quantum_field])
        psi = psi_function.integrate_fields()
        
        # Calculate the probability expectation
        probability_expectation = ProbabilityExpectation(psi)
        probability = probability_expectation.calculate_expectation()
        
        # Convert to classical field
        classical_field = ClassicalField(probability)
        classical_wave = classical_field.to_classical()
        
        # Visualize the classical field
        self.visualizer.plot_field(classical_wave)
```

This concludes a fully working implementation.